class ArtifactSphereInvulnerability extends RPGArtifact
		config(fpsRPG);

var config int AdrenalineRequired;
var config float ExpPerSecond;
var config int AdrenalinePerSecond;
var config float EffectRadius;		// needs to be 500, 700, 900 or 1100

var RPGRules Rules;
var vector SpawnLocation;
var Material EffectOverlay;

function BotConsider()
{
	if (Instigator.Controller.Adrenaline < AdrenalineRequired)
		return;

	if (bActive && (Instigator.Controller.Enemy == None || !Instigator.Controller.CanSee(Instigator.Controller.Enemy)))
		Activate();
	else if ( !bActive && Instigator.Controller.Enemy != None
		   && Instigator.Controller.CanSee(Instigator.Controller.Enemy) && NoArtifactsActive() && !Instigator.Controller.bGodMode && FRand() < 0.05 )
		Activate();
}

simulated function PostBeginPlay()
{
	CostPerSec = AdrenalinePerSecond;

	super.PostBeginPlay();

	CheckRPGRules();
}

function CheckRPGRules()
{
	Local GameRules G;

	if (Level.Game == None)
		return;		//try again later

	for(G = Level.Game.GameRulesModifiers; G != None; G = G.NextGameRules)
	{
		if(G.isA('RPGRules'))
		{
			Rules = RPGRules(G);
			break;
		}
	}

	if(Rules == None)
		Log("WARNING: Unable to find RPGRules in GameRules. EXP will not be properly awarded");
}

function SetTeamInvulnerable(vector CoreLocation)
{
	Local Controller C;
	Local InvulnerabilityInv Inv;

	C = Level.ControllerList;
	while (C != None)
	{
		// loop round finding all players on same team
		if ( C.Pawn != None && C.Pawn != Instigator && C.Pawn.Health > 0 && C.SameTeamAs(Instigator.Controller)
		     && VSize(C.Pawn.Location - CoreLocation) < EffectRadius && C.bGodMode == False && Vehicle(C.Pawn) == None && RedeemerWarhead(C.Pawn) == None)
		{
			// godmode is false so can't already have invulnerability set
			Inv = spawn(class'InvulnerabilityInv', C.Pawn,,, rot(0,0,0));
			if(Inv != None)
			{
				Inv.CoreLocation = CoreLocation;
				Inv.Rules = Rules;
				Inv.ExpPerSecond = ExpPerSecond;
				Inv.EffectRadius = EffectRadius;
				Inv.InvPlayerController = Instigator.Controller;
				Inv.EstimatedRunTime = 2*Instigator.Controller.Adrenaline / CostPerSec;
				Inv.GiveTo(C.Pawn);
			}
		}
		C = C.NextController;
	}
}

state Activated
{
	function BeginState()
	{	local Vehicle V;

		if(Rules == None)
			CheckRPGRules();

		if ((Instigator != None) && (Instigator.Controller != None))
		{
			if(Instigator.Controller.Adrenaline < AdrenalineRequired)
			{
				Instigator.ReceiveLocalizedMessage(MessageClass, AdrenalineRequired, None, None, Class);
				bActive = false;
				GotoState('');
				return;
			}
		
			V = Vehicle(Instigator);
			if (V != None )
			{
				Instigator.ReceiveLocalizedMessage(MessageClass, 3000, None, None, Class);
				bActive = false;
				GotoState('');
				return;	// can't use in a vehicle

			}

			// change the guts of it
			SpawnLocation = Instigator.Location;
			switch (EffectRadius) 
			{
			case 500:
				spawn(class'SphereInvulnerability500r', Instigator.Controller,,SpawnLocation);
				break;
			case 700:
				spawn(class'SphereInvulnerability700r', Instigator.Controller,,SpawnLocation);
				break;
			case 900:
				spawn(class'SphereInvulnerability900r', Instigator.Controller,,SpawnLocation);
				break;
			case 1100:
				spawn(class'SphereInvulnerability1100r', Instigator.Controller,,SpawnLocation);
				break;
			Default:
				Log("ArtifactSphereInvulnerability invalid radius used. Should be 500, 700, 900 or 1100");
				spawn(class'SphereInvulnerability900r', Instigator.Controller,,SpawnLocation);
				break;
			}
			Instigator.Controller.bGodMode = true;
			Instigator.SetOverlayMaterial(EffectOverlay, Instigator.Controller.Adrenaline / CostPerSec, true);
			bActive = true;

			// now let's add to the people around us
			SetTeamInvulnerable(SpawnLocation);
			SetTimer(0.5, true);
		}
	}
	function Timer()
	{
		if (bActive)
		{
			switch (EffectRadius) 
			{
			case 500:
				spawn(class'SphereInvulnerability500r', Instigator.Controller,,SpawnLocation);
				break;
			case 700:
				spawn(class'SphereInvulnerability700r', Instigator.Controller,,SpawnLocation);
				break;
			case 900:
				spawn(class'SphereInvulnerability900r', Instigator.Controller,,SpawnLocation);
				break;
			case 1100:
				spawn(class'SphereInvulnerability1100r', Instigator.Controller,,SpawnLocation);
				break;
			Default:
				spawn(class'SphereInvulnerability900r', Instigator.Controller,,SpawnLocation);
				break;
			}
			SetTeamInvulnerable(SpawnLocation);
		}
	}
	function EndState()
	{
		Local Controller C;
		Local InvulnerabilityInv IInv;
		Local ArtifactInvulnerability Globe;
		local bool IsOK;
		
		SetTimer(0, false);
				if (Instigator != None)
		{
			if (Instigator.Controller != None)
			{
				Instigator.Controller.bGodMode = false;
			}
			Instigator.SetOverlayMaterial(EffectOverlay, -1, true);
		}
		bActive = false;
		// ok, lets ensure everyone who has bGodMode set has a reason for it
		// everyone should have either a globe or a InvulnerabilityInv

		C = Level.ControllerList;
		while (C != None)
		{
			// loop round finding all pawns with inv
			if (C.bGodMode)
			{
				IsOK = false;
				// see if has a pawn with an active globe
				if (C.Pawn != None)
				{
					Globe = ArtifactInvulnerability(C.Pawn.FindInventoryType(class'ArtifactInvulnerability'));
					if (Globe != None && Globe.bActive)
						IsOK = true;
					else	// not got running globe. check for valid InvulnerabilityInv
					{
						IInv = InvulnerabilityInv(C.Pawn.FindInventoryType(class'InvulnerabilityInv'));
						if (IInv != None && IInv.Owner != None && Pawn(IInv.Owner) != None && Pawn(IInv.Owner).Controller == C)
						{
							if (IInv.EstimatedRunTime > 0)
								IsOK = true;
						}
					}
				}
				if (!IsOK)
					C.bGodMode = false;
			}
			
			C = C.NextController;
		}
	}
}

exec function TossArtifact()
{
	//do nothing. This artifact cant be thrown
}

function DropFrom(vector StartLocation)
{
	if (bActive)
		GotoState('');
	bActive = false;

	Destroy();
	Instigator.NextItem();
}

static function string GetLocalString(optional int Switch, optional PlayerReplicationInfo RelatedPRI_1, optional PlayerReplicationInfo RelatedPRI_2)
{
	if (Switch == 3000)
		return "Cannot use this artifact inside a vehicle";
	else if (Switch == 0)
		return "Your adrenaline has run out.";
	else
		return switch @ "Adrenaline is required to use this artifact";
}

defaultproperties
{
     AdrenalineRequired=72
     ExpPerSecond=1.500000
     AdrenalinePerSecond=18
     EffectRadius=900.000000
     EffectOverlay=Shader'fpsRPGTex.Overlays.InvulnerabilityOverlay'
     CostPerSec=18
     PickupClass=Class'fpsRPG.ArtifactSphereInvulnerabilityPickup'
     IconMaterial=Texture'fpsRPGTex.Icons.SphereInvulnerability'
     ItemName="Invulnerability Sphere"
}
